import numpy as np
from stp import *
from collections import Counter

# Calculate the number of possible states: 2^n
num_states = pow(2, len(Genes))

# -----------------------------
# Step 1: Load multiple experiment datasets and build the logical transition dictionary
# -----------------------------
def load_data(file_paths):
    logical_indices_dictionary = {}
    for path in file_paths:
        data = np.load(path)
        states = data['states']
        data.close()

        experiment_data = list(states)
        # Convert each Boolean state to an integer index (1-based)
        logical_form = [
            sum((1 - state[i]) * pow(2, len(state) - i - 1) for i in range(len(state))) + 1
            for state in experiment_data
        ]

        # Store transitions: current state → next state
        for i in range(0, len(logical_form) - 1, 2):
            key, value = logical_form[i], logical_form[i + 1]
            logical_indices_dictionary.setdefault(key, []).append(value)

    return dict(sorted(logical_indices_dictionary.items()))

# File paths for all 10 experimental datasets
file_paths = [f'data_{i}.npz' for i in range(1, 13)]
logical_indices_dictionary = load_data(file_paths)

# -----------------------------
# Step 2: Construct L_indices vector (used to build transition matrix L)
# -----------------------------
L_indices = np.zeros(num_states, dtype=int)
for key, value in logical_indices_dictionary.items():
    L_indices[key - 1] = int(value[0]) 

# Build the transition matrix L
L = np.zeros((num_states, num_states))
for row in np.where(L_indices != 0)[0]:
    L[row, L_indices[row] - 1] = 1
L = L.T  

# -----------------------------
# Step 3: Generate structure matrices S_i for each Boolean variable
# -----------------------------
def generate_S_matrix(n):
    S_matrix = []
    for i in range(1, n + 1):
        repeat_1, repeat_2 = 2 ** (n - i), 2 ** (i - 1)
        row = np.tile([1] * repeat_1 + [2] * repeat_1, repeat_2)
        S_matrix.append(row)
    return np.array(S_matrix)

S_matrix = generate_S_matrix(5)

# Define delta vectors for Boolean values 0 and 1
delta_1 = np.array([[1], [0]])  # δ1 (represents Boolean 0)
delta_2 = np.array([[0], [1]])  # δ2 (represents Boolean 1)

# Build S matrices as horizontal stacks of δ vectors
S_matrices = [
    np.hstack([delta_1 if val == 1 else delta_2 for val in S_matrix[row]])
    for row in range(5)
]

# -----------------------------
# Step 4: Compute Boolean control function matrices M_i = S_i · L
# -----------------------------
M_matrices = [sp(S_row, L) for S_row in S_matrices]

# -----------------------------
# Step 5: Use permutation matrices to test regulator influence
# -----------------------------
I2 = np.eye(2)
Mn = np.array([[0, 1], [1, 0]])  # Logical NOT operator

# Permutation matrix W[m,n] for Kronecker products
def lwij(m, n):
    size = m * n
    W = np.zeros((size, size))
    for i in range(m):
        for j in range(n):
            W[i * n + j, j * m + i] = 1
    return W

# Test which genes regulate Cell5
M5 = M_matrices[4]  # M for Cell5

for i, name in enumerate(["Cell1", "Cell2", "Cell3", "Cell4", "Cell5"]):
    W = lwij(2, 2 ** i)
    P = sp(sp(M1, W), Mn - I2)
    is_zero = np.all(P == 0)
    print(f"{name}:", is_zero)

'''
    Cell5 ：Cell1、Cell2
x5(t+1) =M5·x1(t)·x2(t)·x3(t)·x4(t)·x5(t)
        =M1·W[8,4]·x3(t)·x4(t)·x5(t)·x1(t)·x2(t)
'''
Mp = sp(sp(sp(sp(M1, lwij(8,4)), np.array([[1], [0]])), np.array([[1], [0]])), np.array([[1], [0]]))
print('target cell: Cell5')
print('regulators: Cell1、Cell2')
print(Mp)
print('------------------------')
